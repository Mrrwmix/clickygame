{"version":3,"sources":["components/Wrapper.js","context/gameContext.js","components/Header.js","components/Instructions.js","components/Image.js","components/ImageContainer.js","components/Footer.js","context/gameReducer.js","context/types.js","context/GameState.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","gameContext","createContext","Header","useContext","GameContext","score","highScore","guess","Instructions","imgStyle","width","height","border","boxShadow","cursor","Image","image","spring","useSpring","opacity","from","clickedCard","src","id","name","div","style","alt","onClick","identity","ImageContainer","AnimatedImage","animated","images","sort","a","b","Math","random","map","item","key","Footer","href","target","rel","state","action","type","img","payload","clicked","GameState","useReducer","gameReducer","dispatch","Provider","value","e","i","length","Number","getAttribute","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4caf38de.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Wrapper = props => {\r\n  return <div className='container-fluid'>{props.children}</div>;\r\n};\r\n\r\nexport default Wrapper;\r\n","import { createContext } from 'react';\r\n\r\nconst gameContext = createContext();\r\n\r\nexport default gameContext;\r\n","import React, { useContext } from \"react\";\r\nimport GameContext from \"../context/gameContext\";\r\n\r\nconst Header = () => {\r\n  const gameContext = useContext(GameContext);\r\n  const { score, highScore, guess } = gameContext;\r\n  return (\r\n    <div className='row py-3 bg-dark text-center text-primary'>\r\n      <h1 className='col-md-4 text-info'>Score: {score}</h1>\r\n      {guess === null && <h1 className='col-md-4'>Click to get started!</h1>}\r\n      {guess && (\r\n        <h1 className='col-md-4 text-success'>You guessed correctly!</h1>\r\n      )}\r\n      {guess === false && <h1 className='col-md-4 text-danger'>Ruh roh!</h1>}\r\n      <h1 className='col-md-4 text-info'>Top Score: {highScore}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Instructions = () => {\r\n  return (\r\n    <div className='row bg-secondary py-3'>\r\n      <h1 className='col-md-12 pt-2 text-center text-white'>Clicky Game!</h1>\r\n      <h3 className='pb-2 text-center text-white col-md-12'>\r\n        Click on an image to earn points, but don't click on any more than once!\r\n      </h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Instructions;\r\n","import React, { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport GameContext from \"../context/gameContext\";\r\nimport \"../App.css\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nconst imgStyle = {\r\n  width: \"10vw\",\r\n  height: \"17vh\",\r\n  border: \"2px solid slategray\",\r\n  boxShadow: \"1vw 1vh 2vw black\",\r\n  cursor: \"pointer\"\r\n};\r\n\r\nconst Image = ({ image }) => {\r\n  const gameContext = useContext(GameContext);\r\n  const spring = useSpring({ opacity: 1, from: { opacity: 0 } });\r\n  const { clickedCard } = gameContext;\r\n  const { src, id, name } = image;\r\n\r\n  return (\r\n    <animated.div\r\n      className='col-sm-3 text-center my-1 cardo d-flex justify-content-center'\r\n      style={spring}\r\n    >\r\n      <img\r\n        src={src}\r\n        alt={name}\r\n        className='rounded-circle my-1'\r\n        style={imgStyle}\r\n        onClick={clickedCard}\r\n        identity={id}\r\n      />\r\n    </animated.div>\r\n  );\r\n};\r\n\r\nImage.propTypes = {\r\n  image: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Image;\r\n","import React, { useContext } from \"react\";\r\nimport GameContext from \"../context/gameContext\";\r\nimport Image from \"./Image\";\r\nimport { animated } from \"react-spring\";\r\n\r\nconst ImageContainer = () => {\r\n  const AnimatedImage = animated(Image);\r\n  const gameContext = useContext(GameContext);\r\n  const { images } = gameContext;\r\n  return (\r\n    <div className='flex-row mx-4 d-flex justify-content-between flex-wrap'>\r\n      {images\r\n        .sort((a, b) => (Math.random() >= 0.5 ? 1 : -1))\r\n        .map(item => (\r\n          <AnimatedImage image={item} key={item.id} />\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageContainer;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className='row static-bottom bg-dark text-primary'>\r\n      <div className='col-md-12'>\r\n        <h4 className='text-center mt-1'>\r\n          Github Repository:\r\n          <a\r\n            href='https://github.com/Mrrwmix/clickygame'\r\n            target='_blank'\r\n            rel='noopener noreferrer'\r\n            className='text-info'\r\n          >\r\n            {\" \"}\r\n            https://github.com/Mrrwmix/clickygame\r\n          </a>\r\n        </h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import { INCREMENT_SCORE, SET_HIGH_SCORE } from \"./types\";\r\n\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case INCREMENT_SCORE:\r\n      return {\r\n        ...state,\r\n        guess: true,\r\n        score: state.score + 1,\r\n        images: state.images.map(img =>\r\n          img.id === action.payload ? { ...img, clicked: true } : img\r\n        )\r\n      };\r\n    case SET_HIGH_SCORE:\r\n      return {\r\n        score: 0,\r\n        highScore:\r\n          action.payload > state.highScore ? action.payload : state.highScore,\r\n        guess: false,\r\n        images: state.images.map(img =>\r\n          img.clicked === true ? { ...img, clicked: false } : img\r\n        )\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const INCREMENT_SCORE = \"INCREMENT_SCORE\";\r\nexport const SET_HIGH_SCORE = \"SET_HIGH_SCORE\";\r\n","import React, { useReducer } from \"react\";\r\nimport gameContext from \"./gameContext\";\r\nimport gameReducer from \"./gameReducer\";\r\nimport { INCREMENT_SCORE, SET_HIGH_SCORE } from \"./types\";\r\n\r\nconst GameState = props => {\r\n  const initialState = {\r\n    images: [\r\n      {\r\n        id: 1,\r\n        src: \"./images/maylee.png\",\r\n        clicked: false,\r\n        name: \"May Lee\"\r\n      },\r\n      {\r\n        id: 2,\r\n        src: \"./images/kula.png\",\r\n        clicked: false,\r\n        name: \"Kula Diamond\"\r\n      },\r\n      {\r\n        id: 3,\r\n        src: \"./images/K.png\",\r\n        clicked: false,\r\n        name: \"K\"\r\n      },\r\n      {\r\n        id: 4,\r\n        src: \"./images/terry.jpg\",\r\n        clicked: false,\r\n        name: \"Terry\"\r\n      },\r\n      {\r\n        id: 5,\r\n        src: \"./images/benimaru.png\",\r\n        clicked: false,\r\n        name: \"Benimaru\"\r\n      },\r\n      {\r\n        id: 6,\r\n        src: \"./images/robert.png\",\r\n        clicked: false,\r\n        name: \"Robert\"\r\n      },\r\n      {\r\n        id: 7,\r\n        src: \"./images/kim.png\",\r\n        clicked: false,\r\n        name: \"Kim\"\r\n      },\r\n      {\r\n        id: 8,\r\n        src: \"./images/choi.jpg\",\r\n        clicked: false,\r\n        name: \"Choi\"\r\n      },\r\n      {\r\n        id: 9,\r\n        src: \"./images/ryo.jpg\",\r\n        clicked: false,\r\n        name: \"Ryo\"\r\n      },\r\n      {\r\n        id: 10,\r\n        src: \"./images/daimon.jpg\",\r\n        clicked: false,\r\n        name: \"Daimon\"\r\n      },\r\n      {\r\n        id: 11,\r\n        src: \"./images/chang.png\",\r\n        clicked: false,\r\n        name: \"Chang\"\r\n      },\r\n      {\r\n        id: 12,\r\n        src: \"./images/geese.jpg\",\r\n        clicked: false,\r\n        name: \"Geese\"\r\n      },\r\n      {\r\n        id: 13,\r\n        src: \"./images/yuri.png\",\r\n        clicked: false,\r\n        name: \"Yuri\"\r\n      },\r\n      {\r\n        id: 14,\r\n        src: \"./images/iori.png\",\r\n        clicked: false,\r\n        name: \"Iori\"\r\n      },\r\n      {\r\n        id: 15,\r\n        src: \"./images/maxima.png\",\r\n        clicked: false,\r\n        name: \"Maxima\"\r\n      },\r\n      {\r\n        id: 16,\r\n        src: \"./images/takuma.jpg\",\r\n        clicked: false,\r\n        name: \"Takuma\"\r\n      }\r\n    ],\r\n    score: 0,\r\n    highScore: 0,\r\n    guess: null\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(gameReducer, initialState);\r\n\r\n  //actions for the reducer\r\n  const clickedCard = e => {\r\n    for (let i = 0; i < state.images.length; i++) {\r\n      if (\r\n        state.images[i].id === Number(e.target.getAttribute(\"identity\")) &&\r\n        state.images[i].clicked === false\r\n      ) {\r\n        return dispatch({\r\n          type: INCREMENT_SCORE,\r\n          payload: Number(e.target.getAttribute(\"identity\"))\r\n        });\r\n      } else if (\r\n        state.images[i].id === Number(e.target.getAttribute(\"identity\")) &&\r\n        state.images[i].clicked === true\r\n      ) {\r\n        return dispatch({\r\n          type: SET_HIGH_SCORE,\r\n          payload: state.score\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <gameContext.Provider\r\n      value={{\r\n        score: state.score,\r\n        highScore: state.highScore,\r\n        images: state.images,\r\n        guess: state.guess,\r\n        clickedCard\r\n      }}\r\n    >\r\n      {props.children}\r\n    </gameContext.Provider>\r\n  );\r\n};\r\n\r\nexport default GameState;\r\n","import React from 'react';\r\nimport Wrapper from './components/Wrapper';\r\nimport Header from './components/Header';\r\nimport Instructions from './components/Instructions';\r\nimport ImageContainer from './components/ImageContainer';\r\nimport Footer from './components/Footer';\r\nimport GameState from './context/GameState';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <GameState>\r\n      <Wrapper>\r\n        <Header />\r\n        <Instructions />\r\n        <ImageContainer />\r\n        <Footer />\r\n      </Wrapper>\r\n    </GameState>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}